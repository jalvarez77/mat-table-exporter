{"version":3,"file":"mat-table-exporter.js","sources":["../../../projects/mat-table-exporter/src/lib/mat-table-exporter.directive.ts","../../../projects/mat-table-exporter/src/lib/mat-table-exporter.module.ts","../../../projects/mat-table-exporter/src/public-api.ts","../../../projects/mat-table-exporter/src/mat-table-exporter.ts"],"sourcesContent":["import { AfterViewInit, Directive, Host, Optional, Renderer2, Self } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { CdkTableExporter, DataExtractorService, ServiceLocatorService } from 'cdk-table-exporter';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[matTableExporter]',\r\n  exportAs: 'matTableExporter'\r\n})\r\nexport class MatTableExporterDirective extends CdkTableExporter implements AfterViewInit {\r\n  /**\r\n   * Overriding ngAfterViewInit of TableExporter\r\n   */\r\n  ngAfterViewInit(): void {\r\n    this.exportStarted.subscribe(_ => {\r\n      this.enablePaginator(false);\r\n    });\r\n    this.exportCompleted.subscribe(_ => {\r\n      this.enablePaginator(true);\r\n    });\r\n  }\r\n\r\n  constructor(\r\n    renderer: Renderer2,\r\n    serviceLocator: ServiceLocatorService,\r\n    dataExtractor: DataExtractorService,\r\n    @Host() @Self() @Optional() table: MatTable<any>\r\n  ) {\r\n    super(renderer, serviceLocator, dataExtractor, table);\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getPageCount\r\n   */\r\n  public getPageCount(): number {\r\n    return this.getPaginator().getNumberOfPages();\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getPageSize\r\n   */\r\n  public getPageSize(): number {\r\n    return this.getPaginator()?.pageSize ?? 0;\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getCurrentPageIndex\r\n   */\r\n  public getCurrentPageIndex(): number {\r\n    return this.getPaginator()?.pageIndex ?? 0;\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getTotalItemsCount\r\n   */\r\n  public getTotalItemsCount(): number {\r\n    return this.getPaginator()?.length ?? this.getDataSource()?.data?.length ?? 0;\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of goToPage\r\n   */\r\n  public goToPage(index: number): void {\r\n    this.getPaginator().pageIndex = index;\r\n    this.getPaginator()._changePageSize(this.getPaginator().pageSize);\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getPageChangeObservable\r\n   */\r\n  public getPageChangeObservable(): Observable<any> {\r\n    return this.getPaginator().page;\r\n  }\r\n\r\n  private getDataSource(): MatTableDataSource<any> {\r\n    return this._cdkTable.dataSource as MatTableDataSource<any>;\r\n  }\r\n\r\n  private getPaginator(): MatPaginator {\r\n    return this.getDataSource().paginator;\r\n  }\r\n\r\n  private enablePaginator(value: boolean) {\r\n    if (this.getPaginator()) {\r\n      this.getPaginator().disabled = !value;\r\n      this.getPaginator()._changePageSize(this.getPaginator().pageSize);\r\n    }\r\n  }\r\n\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { CdkTableExporterModule, XLSX_LIGHTWEIGHT } from 'cdk-table-exporter';\r\nimport { MatTableExporterDirective } from './mat-table-exporter.directive';\r\n\r\nexport interface ModuleConfiguration {\r\n  xlsxLightWeight?: boolean;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [MatTableExporterDirective],\r\n  imports: [\r\n    MatTableModule,\r\n    CdkTableExporterModule\r\n  ],\r\n  exports: [MatTableExporterDirective]\r\n})\r\n\r\nexport class MatTableExporterModule {\r\n  static forRoot(configuration: ModuleConfiguration): ModuleWithProviders<MatTableExporterModule> {\r\n    return {\r\n      ngModule: MatTableExporterModule,\r\n      providers: [\r\n        {\r\n          provide: XLSX_LIGHTWEIGHT,\r\n          useValue: configuration.xlsxLightWeight\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","\r\n/*\r\n * Public API Surface of mat-table-exporter\r\n */\r\n\r\nexport * from './lib/mat-table-exporter.module';\r\nexport { MatTableExporterDirective } from './lib/mat-table-exporter.directive';\r\nexport * from 'cdk-table-exporter';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;MAUa,yBAA0B,SAAQ,gBAAgB;IAa7D,YACE,QAAmB,EACnB,cAAqC,EACrC,aAAmC,EACP,KAAoB;QAEhD,KAAK,CAAC,QAAQ,EAAE,cAAc,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;KACvD;;;;IAhBD,eAAe;QACb,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC5B,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;SAC7B,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;SAC5B,CAAC,CAAC;KACJ;;;;IAcM,YAAY;QACjB,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC,gBAAgB,EAAE,CAAC;KAC/C;;;;IAKM,WAAW;;QAChB,mBAAO,IAAI,CAAC,YAAY,EAAE,0CAAE,QAAQ,mCAAI,CAAC,CAAC;KAC3C;;;;IAKM,mBAAmB;;QACxB,mBAAO,IAAI,CAAC,YAAY,EAAE,0CAAE,SAAS,mCAAI,CAAC,CAAC;KAC5C;;;;IAKM,kBAAkB;;QACvB,yBAAO,IAAI,CAAC,YAAY,EAAE,0CAAE,MAAM,+CAAI,IAAI,CAAC,aAAa,EAAE,0CAAE,IAAI,0CAAE,MAAM,mCAAI,CAAC,CAAC;KAC/E;;;;IAKM,QAAQ,CAAC,KAAa;QAC3B,IAAI,CAAC,YAAY,EAAE,CAAC,SAAS,GAAG,KAAK,CAAC;QACtC,IAAI,CAAC,YAAY,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,CAAC;KACnE;;;;IAKM,uBAAuB;QAC5B,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC;KACjC;IAEO,aAAa;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,UAAqC,CAAC;KAC7D;IAEO,YAAY;QAClB,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC;KACvC;IAEO,eAAe,CAAC,KAAc;QACpC,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC,QAAQ,GAAG,CAAC,KAAK,CAAC;YACtC,IAAI,CAAC,YAAY,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,CAAC;SACnE;KACF;;;YAlFF,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE,kBAAkB;aAC7B;;;YATkD,SAAS;YAGX,qBAAqB;YAA3C,oBAAoB;YADtC,QAAQ,uBAyBZ,IAAI,YAAI,IAAI,YAAI,QAAQ;;;MCThB,sBAAsB;IACjC,OAAO,OAAO,CAAC,aAAkC;QAC/C,OAAO;YACL,QAAQ,EAAE,sBAAsB;YAChC,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,gBAAgB;oBACzB,QAAQ,EAAE,aAAa,CAAC,eAAe;iBACxC;aACF;SACF,CAAC;KACH;;;YApBF,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,yBAAyB,CAAC;gBACzC,OAAO,EAAE;oBACP,cAAc;oBACd,sBAAsB;iBACvB;gBACD,OAAO,EAAE,CAAC,yBAAyB,CAAC;aACrC;;;ACfD;;;;ACDA;;;;;;"}